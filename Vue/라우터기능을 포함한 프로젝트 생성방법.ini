라우터기능을 포함한 프로젝트 생성방법

1.프로젝트 생성하기
  npm create vite@latest
2.프로젝트 생성후 라이브러리 설치하기
  npm i vuetify @mdi/font vue-router
3.라이브러리 기본값 설정하기
  -뷰티파이, 아이콘 폰트의 경우 기존자료 참고하여 main.js다 붙여넣기
    [main.js]에 설정할 뷰티파이 및 아이콘 기본 값
      // 뷰티파이 사용 추가내용
      import 'vuetify/styles';
      import { createVuetify } from 'vuetify';
      import * as components from 'vuetify/components';
      import * as directives from 'vuetify/directives';
      // mdi-아이콘 가져오기
      import { aliases, mdi } from 'vuetify/iconsets/mdi';
      import '@mdi/font/css/materialdesignicons.css';
      // 뷰티파이 인스턴스 생성
      const vuetify = createVuetify({
        components,
        directives,
        // 아이콘 컴포넌트 쓴다고 선언해야지만 화면에 뜬다
        icons: {
          defaultSet: 'mdi',
          aliases,
          sets: {
            mdi,
          },
        },
      });
  -라우터 설정시 src폴더 하위로 router폴더 생성하여 index.js 만들기
    [router/index.js] 기본값
      import { createRouter, createWebHistory } from 'vue-router'
      import Home from '@/pages/Home.vue' // 연결할 컴포넌트 가져오기
      const router = createRouter({
        history: createWebHistory(),
        routes : [
            { path: '/', component: Home }, // 경로 설정
        ]
      })
      export default router;
  
  - 라우터값도 main.js에 적어놓기
    // 라우터 설정
    import { router } from './router';
    // 사용선언
    app.use(vuetify).use(router).mount('#app');

4. 각 연결할 서브 페이지 구성하기
  - 프로젝트 규모에 따라서 서브 페이지 구성할 폴더를 생성한다.
    component만 구성하고 불러와도 되고, component와 pages를 구성하여
    2단 구성을 만들어도 된다.
    component는 기능기준 최소단위, pages는 component 조합으로 이루어진
    레이아웃 구성으로 나누면 된다.
  - 각 폴더에 생성된 *.vue의 이름들은 라우터에 적용된 철자와 같아야 하며,
    내용물을 채워 화면에 뜨는지 확인한다.